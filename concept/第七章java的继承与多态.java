/*
 *	符号：//和***表示需要记住,细节全部需要记住 
 *
 *
 * 继承：
 * 
 * 	//		继承的作用：当一个类B继承了一个已存在的类A之后，类B就拥有了类A所有的非private的属性和方法，但同时，类B中还可以根据需要添加新的属性和方法
 * 					      类A被称为父类，基类或超类，类B被称为子类
 * 			
 * 			继承的特点:***1.继承关系可传递
 *                       2.继承简化了人们对事物的认识和描述，能清晰体现相关类间的层次结构关系
 *                       3.继承提高了代码的复用性
 *                    ***4.继承通过增强一致性来减少模块间的接口和界面，大大增加了程序的易维护性
 *                    ***5.java只支持单重继承，但提供了多层继承
 *          
 * 	//		子类继承父类的格式：
 *          
 *          			访问控制符【修饰符】class类名 extends 父类名{
 *          			[<属性定义>]
 *          			[<构造方法定义>]
 *          			[<方法声明>]
 *    		      }
 *    
 *  //  	细节：	1.在类声明时，如果没有使用extends关键字继承父类，则自动继承Object类，所有的java类都直接或间接地继承java.lang.Object类
 *    			  	    换句话说，除了根类Object之外，所有的类都会是某个类的子类。
 *    
 *    				2.如果子类和父类在同一个包内，则子类不能直接访问父类的private属性和方法，但是子类可以调用非private的属性和方法。
 *    				   如果子类和父类不在同一个包内，则子类可以访问父类的protectd、public的属性和方法，但不能访问父类的private、默认访问级别的属性和方法
 *    		
 *    				3.如果子类中定义的方法使用的方法名、返回值类型和参数列表与父类中的方法一样，则称为子类的方法重写了父类的方法
 *      			   父类的构造方法不能重写，因为构造函数与所在类的类名相同，而子类和父类的类名不同，所以子类不能重写父类的构造方法
 * 					
 * 					4.	1>父类的静态方法不能被子类重写为非静态方法，父类的非静态方法也不能被子类重写为静态方法。子类可以定义与父类的静态方法同名的静态方法，以便在子类中隐藏父类的静态方法
 * 						2>子类方法不能缩小父类方法的访问权限
 * 						3>子类方法不能抛出比父类方法更多的异常
 * 						4>父类中的抽象方法可以被子类通过两种途径重写：一是实现父类的抽象方法；二是子类重新声明父类的抽象方法
 * 						5>父类中的私有方法不能被子类重写
 *    					6>父类中的非抽象方法可以被子类重写为抽象方法
 *    
 *    				5.子类不但可以对从父类继承来的方法重写，还可以对继承来的属性重新定义
 *    
 *    				6.在继承中，子类对象在实例化之前，必须先调用父类中的构造方法，再调用子类中的构造方法
 *    
 *    				
 * 																					
 * 
 * 
 * */